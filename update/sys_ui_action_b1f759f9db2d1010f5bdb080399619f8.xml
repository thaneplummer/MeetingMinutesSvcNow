<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name>create_ms_word_action</action_name>
        <active>true</active>
        <client>true</client>
        <client_script_v2><![CDATA[function onClick(g_form) { }]]></client_script_v2>
        <comments/>
        <condition/>
        <form_action>true</form_action>
        <form_button>true</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style/>
        <hint/>
        <isolate_script>true</isolate_script>
        <list_action>false</list_action>
        <list_banner_button>false</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style/>
        <name>Create MS Word</name>
        <onclick>create_ms_word_action()</onclick>
        <order>100</order>
        <script><![CDATA[ /*---------------------------------------------------------------------------------
 *
 *   Copyright Â© 2020 Kraken Networks, Inc. and AppVizo, LLC. All Rights Reserved.
 *   File: C:\Projects\ServiceNow\Apps\Meeting Minutes\Meeting-Minutes\Server Development\UI Action\Create MS Word.js
 *   Version: 0.1.0
 *   Notes:
 *   Application: 
 *   Name: Create MS Word
 *   Table: Meeting minutes [x_358839_notes_meeting_notes]
 *   Order: 100
 *   Action name: create_ms_word_action
 *   Active: True
 *   Show insert: True
 *   Show update: True
 *   Client: True
 *   Form button: True
 *   Form context menu: False
 *   Form link: False
 *   List banner button: False
 *   List bottom button: False
 *   List context menu: False
 *   List choice: False
 *   List link: False
 *   Comments:
 *   Hint:
 *   Onclick: create_ms_word_action()
 *   Condition:
 *
 *---------------------------------------------------------------------------------*/
function create_ms_word_action(){console.log("Function saveSmartDocx()");getCustomXML("0e21d975db2d1010f5bdb080399619c3");} var _saveAs = _saveAs || (function(view) { "use strict"; if (typeof view === "undefined" || typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) { return; } var doc = view.document; var get_URL = function() { return view.URL || view.webkitURL || view; }; var save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a"); var can_use_save_link = "download" in save_link; var click = function(node) { var event = new MouseEvent("click"); node.dispatchEvent(event); }; var is_safari = /constructor/i.test(view.HTMLElement) || view.safari; var is_chrome_ios =/CriOS\/[\d]+/.test(navigator.userAgent); var throw_outside = function(ex) { (view.setImmediate || view.setTimeout)(function() { throw ex; }, 0); }; var force_saveable_type = "application/octet-stream"; var arbitrary_revoke_timeout = 1000 * 40; var revoke = function(file) { var revoker = function() { if (typeof file === "string") {  get_URL().revokeObjectURL(file); } else {  file.remove(); } }; setTimeout(revoker, arbitrary_revoke_timeout); }; var dispatch = function(filesaver, event_types, event) { event_types = [].concat(event_types); var i = event_types.length; while (i--) { var listener = filesaver["on" + event_types[i]]; if (typeof listener === "function") { try { listener.call(filesaver, event || filesaver); } catch (ex) { throw_outside(ex); } } } }; var auto_bom = function(blob) { if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) { return new Blob([String.fromCharCode(0xFEFF), blob], {type: blob.type}); } return blob; }; var FileSaver = function(blob, name, no_auto_bom) { if (!no_auto_bom) { blob = auto_bom(blob); } var filesaver = this; var type = blob.type; var force = type === force_saveable_type; var object_url; var dispatch_all = function() { dispatch(filesaver, "writestart progress write writeend".split(" ")); }; var fs_error = function() { if ((is_chrome_ios || (force && is_safari)) && view.FileReader) { var reader = new FileReader(); reader.onloadend = function() { var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, "data:attachment/file;"); var popup = view.open(url, "_blank"); if(!popup) view.location.href = url; url=undefined;  filesaver.readyState = filesaver.DONE; dispatch_all(); }; reader.readAsDataURL(blob); filesaver.readyState = filesaver.INIT; return; } if (!object_url) { object_url = get_URL().createObjectURL(blob); } if (force) { view.location.href = object_url; } else { var opened = view.open(object_url, "_blank"); if (!opened) { view.location.href = object_url; } } filesaver.readyState = filesaver.DONE; dispatch_all(); revoke(object_url); }; filesaver.readyState = filesaver.INIT; if (can_use_save_link) { object_url = get_URL().createObjectURL(blob); setTimeout(function() { save_link.href = object_url; save_link.download = name; click(save_link); dispatch_all(); revoke(object_url); filesaver.readyState = filesaver.DONE; }); return; } fs_error(); }; var FS_proto = FileSaver.prototype; var _saveAs = function(blob, name, no_auto_bom) { return new FileSaver(blob, name || blob.name || "download", no_auto_bom); }; if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) { return function(blob, name, no_auto_bom) { name = name || blob.name || "download"; if (!no_auto_bom) { blob = auto_bom(blob); } return navigator.msSaveOrOpenBlob(blob, name); }; } FS_proto.abort = function(){}; FS_proto.readyState = FS_proto.INIT = 0; FS_proto.WRITING = 1; FS_proto.DONE = 2; FS_proto.error = null; FS_proto.onwritestart = null; FS_proto.onprogress = null; FS_proto.onwrite = null; FS_proto.onabort = null; FS_proto.onerror = null; FS_proto.onwriteend = null; return _saveAs; }( typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content ));var b64toBlob=function(b64Data,contentType,sliceSize){contentType=contentType||"";sliceSize=sliceSize||512;var byteCharacters=atob(b64Data);var byteArrays=[];for(var offset=0;offset<byteCharacters.length;offset+=sliceSize){var slice=byteCharacters.slice(offset,offset+sliceSize);var byteNumbers=new Array(slice.length);for(var i=0;i<slice.length;i++){byteNumbers[i]=slice.charCodeAt(i);}var byteArray=new Uint8Array(byteNumbers);byteArrays.push(byteArray);}var blob=new Blob(byteArrays,{type:contentType});return blob;};function saveOpenXml(response){var answer=response.responseXML.documentElement.getAttribute("answer"); console.log("saveOpenXml"); var suffix = ".docx~"; var idx = answer.indexOf(suffix) + suffix.length; var filename = answer.substring(0,idx-1); var docx = answer.substring(idx); var formData=b64toBlob(docx,"application/vnd.openxmlformats-officedocument.wordprocessingml.document");_saveAs(formData,filename);}function getCustomXML(template_id){console.log("getCustomXML: "+template_id);var id=g_form.getUniqueValue();var table=g_form.getTableName();var ajax=new GlideAjax("x_358839_smartdocx.SmartDocxAjax"); ajax.addParam("sysparm_name","mapRecordToOpenXmlTemplate"); ajax.addParam("sysparm_sys_id",id); ajax.addParam("sysparm_table",table);ajax.addParam("sysparm_template_id",template_id);ajax.getXML(saveOpenXml);}]]></script>
        <show_insert>true</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>elizabeth.campbell</sys_created_by>
        <sys_created_on>2020-06-22 13:37:30</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>b1f759f9db2d1010f5bdb080399619f8</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>Create MS Word</sys_name>
        <sys_overrides/>
        <sys_package display_value="Meeting Minutes" source="x_358839_notes">3f356d72dbbf0010f5bdb08039961911</sys_package>
        <sys_policy/>
        <sys_scope display_value="Meeting Minutes">3f356d72dbbf0010f5bdb08039961911</sys_scope>
        <sys_update_name>sys_ui_action_b1f759f9db2d1010f5bdb080399619f8</sys_update_name>
        <sys_updated_by>arendil.plummer</sys_updated_by>
        <sys_updated_on>2020-06-25 17:27:12</sys_updated_on>
        <table>x_358839_notes_meeting_notes</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>false</ui16_compatible>
    </sys_ui_action>
</record_update>
