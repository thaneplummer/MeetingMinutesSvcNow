<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_358839_notes.JsonToXml</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Converts JSON object to XML. Source: https://sites.google.com/site/mynotepad2/developer-notes/javascript/javascript-convert-json-object-to-xml-string&#13;
Inverse  function of  gs.xmlToJSON(xmlString);</description>
        <name>JsonToXml</name>
        <script><![CDATA[/*---------------------------------------------------------------------------------
 *
 *   Copyright Â© 2020 Kraken Networks, Inc. and AppVizo, LLC. All Rights Reserved.
 *   File: C:\Projects\ServiceNow\Apps\Meeting Minutes\Meeting-Minutes\Server Development\Script Include\JsonToXml.js
 *   Version: 0.1.0
 *   Notes:
 *   Application: Meeting Minutes
 *   Name: JsonToXml
 *   API Name: x_358839_notes.JsonToXml
 *   Client callable: False
 *   Caller Access: --None--
 *   Accessible from: All application scopes
 *   Active: True
 *   Description: Converts JSON object to XML. Source: https://sites.google.com/site/mynotepad2/developer-notes/javascript/javascript- convert-json-object-to-xml-string
Inverse  function of  gs.xmlToJSON(xmlString);
 *
 *---------------------------------------------------------------------------------*/
var JsonToXml = Class.create();
JsonToXml.prototype = {
    initialize: function(json) {
		this.XML = json2xml(json);
    },
	
	getXML: function(json) {
		this.XML = json2xml(json);
		return this.XML;
	},

    type: 'JsonToXml'
};

function json2xml(o) {
	if (typeof o == 'object' && o.constructor == Object && len(o) == 1) {
		for (var a in o) {
			return toXML(a, o[a]);
		}
	} else {
	}
	function len(o) {
		var n = 0;
		for (var a in o) {
			n++;
		}
		return n;
	}
	function toXML(tag, o) {
		var doc = '<' + tag;
		if (typeof o === 'undefined' || o === null) {
			doc += '/>';
			return doc;
		}
		if (typeof o !== 'object') {
			doc += '>' + safeXMLValue(o) + '</' + tag + '>';
			return doc;
		}
		if (o.constructor == Object) {
			for (var a in o) {
				var attribute = 'content' in o && a !== 'content';
				if (attribute) { //a.charAt(0) == '@') {
					if (typeof o[a] !== 'object') {
						//doc += ' ' + a.substring(1) + '="' + o[a] + '"';
                        doc += ' ' + a + '="' + o[a] + '"';
						delete o[a];
					} else {
						throw new Error((typeof o[a]) + ' being attribute is not supported.');
					}
				} else if ('content' in o && a === 'content') {
                    doc += '>' + o[a] + '</' + tag + '>';
					delete o[a];
				}
			}
			if (len(o) === 0) {
				doc += '/>';
				return doc;
			} else {
				doc += '>';
			}
			if (typeof o['#text'] !== 'undefined') {
				if (typeof o['#text'] !== 'object') {
					doc += o['#text'];
					delete o['#text'];
				} else {
					throw new Error((typeof o['#text'])
							+ ' being #text is not supported.');
				}
			}
			for (var b in o) {
				if (o[b].constructor == Array) {
					for (var i = 0; i < o[b].length; i++) {
						if (typeof o[b][i] !== 'object'
								|| o[b][i].constructor == Object) {
							doc += toXML(b, o[b][i]);
						} else {
							throw new Error((typeof o[b][i])
									+ ' is not supported.');
						}
					}
				} else if (o[b].constructor == Object
						|| typeof o[b] !== 'object') {
					doc += toXML(b, o[b]);
				} else {
					throw new Error((typeof o[b]) + ' is not supported.');
				}
			}
			doc += '</' + tag + '>';
			return doc;
		}
	}
	function safeXMLValue(value) {
		var s = value.toString();
		s = s.replace('/\&/g', '&amp;');
		s = s.replace('/\"/g', '&quot;');
		s = s.replace('/</g', '&lt;');
		s = s.replace('/>/g', '&gt;');
		return s;
	}
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-04-24 18:14:56</sys_created_on>
        <sys_id>48e022f6db145010f5bdb08039961962</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>JsonToXml</sys_name>
        <sys_package display_value="Meeting Minutes" source="x_358839_notes">3f356d72dbbf0010f5bdb08039961911</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Meeting Minutes">3f356d72dbbf0010f5bdb08039961911</sys_scope>
        <sys_update_name>sys_script_include_48e022f6db145010f5bdb08039961962</sys_update_name>
        <sys_updated_by>arendil.plummer</sys_updated_by>
        <sys_updated_on>2020-06-25 17:31:10</sys_updated_on>
    </sys_script_include>
</record_update>
